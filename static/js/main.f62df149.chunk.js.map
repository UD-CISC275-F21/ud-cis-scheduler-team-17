{"version":3,"sources":["components/SubjectViewer.tsx","components/SemesterViewer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SubjectTable","currID","currentSem","currYear","semList","setSemList","lastID","idSet","semPer","semCount","setSemCount","useState","currentId","setId","courseName","setcourseName","currentKey","setKey","id","name","credits","key","subjectList","setSub","editRow","setEditRow","editId","setEditId","editName","setEditName","editCredits","setEditCredits","submitSem","tempList","alert","newRow","Row","Card","className","map","sbj","InputGroup","FormControl","placeholder","onChange","event","target","value","toString","parseInt","Button","onClick","currSem","Col","tempKey","temp","sub","pop","fixedList","idx","findIndex","semester","splice","i","semesterNum","year","SemesterTable","currentID","setID","allSemesters","changeSemesters","semesterCounter","setSemesterCounter","tempSemCounter","tempid","tempsem","tempyear","Math","trunc","sems","sem","App","Container","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f62df149.chunk.js","sourcesContent":["import React from \"react\";\nimport { useState } from \"react\";\nimport {Subject} from \"../interfaces/subject\";\nimport { Card, Row, Button, Col, InputGroup, FormControl } from \"react-bootstrap\";\nimport { Semester } from \"../interfaces/semester\";\n\nexport function SubjectTable({currID, currentSem, currYear, semList, setSemList, lastID, idSet, semPer, semCount, setSemCount}:{\n    currID: number,\n    currentSem: number,\n    currYear: number,\n    semList: Semester[],\n    setSemList: (semList: Semester[]) => void,\n    lastID: number,\n    idSet: (num: number) => void,\n    semPer: number,\n    semCount: number,\n    setSemCount: (num: number) => void\n}) : JSX.Element {\n    const [currentId, setId] = useState<string>(\"CISC\");\n    const [courseName, setcourseName]  = useState<string>(\"ClassName\");\n    const [currentKey, setKey] = useState<number>(5);\n    const [subjectList, setSub] = useState<Subject[]> ([{id: currentId, name: courseName, credits: 3, key: 1},{id: currentId, name: courseName, credits: 3, key: 2},{id: currentId, name: courseName, credits: 3, key: 3},{id: currentId, name: courseName, credits: 3, key: 4},{id: currentId, name: courseName, credits: 3, key: 5}]);\n\n    const [editRow, setEditRow] = useState<number>(0);\n    const [editId, setEditId] = useState<string>(\"\");\n    const [editName, setEditName] = useState<string>(\"\");\n    const [editCredits, setEditCredits] = useState<number>(0);\n\n    //const semesterID = currID.valueOf();\n    //const currentSemesterNumber = currentSem.valueOf();\n    //const currentSemesterYear = currYear.valueOf();\n    //const currentSemesterNumber = currentSem;\n    //const currentSemesterYear = currYear;\n\n    function addCourse () {\n        const tempKey = currentKey + 1;\n        setKey(tempKey);\n        setId(currentId);\n        setcourseName(courseName);\n        const temp: Subject = {id: currentId, name: courseName, credits: 3, key: tempKey};\n        const sub: Subject[] = [...subjectList, temp];\n        //sub.push(temp);\n        setSub(sub);\n        // Need to fix key generation\n    }\n\n    function deleteCourse () {\n        setKey(currentKey - 1);\n        const sub: Subject[] = [...subjectList];\n        sub.pop();\n        setSub(sub);\n    }\n\n    function clearCourse () {\n        setKey(0);\n        setSub([{id: currentId, name: courseName, credits: 3, key: 0}]);\n    }\n\n    function deleteSem () {\n        idSet(lastID+1);\n        const fixedList: Semester[] = [...semList];\n        //const toDelete: Semester = {id: currID, semesterNum: currentSem, year: currYear};\n        const idx = fixedList.findIndex((semester: Semester) => semester.id===currID);\n        /*if (idx===-1) {\n            alert(\"element not found\");\n        }*/\n        fixedList.splice(idx, 1);\n        //const idx = fixedList.indexOf(this);\n        //fixedList.splice(currID, 1);\n        if (fixedList[0]) {\n            let temp: Semester; \n            for (let i=idx; fixedList[i]; i++) {\n                temp = fixedList[i];\n                //temp.semesterNum = i;\n                temp.semesterNum -= 1;\n                if (temp.semesterNum===0) {\n                    temp.year -= 1;\n                    temp.semesterNum = semPer;\n                }\n                fixedList[i] = temp;\n            }\n            //setSemList(fixedList);\n        } else {\n            idSet(-1);\n            //setSemList(fixedList);\n        }\n        setSemCount(semCount-1);\n        setSemList(fixedList);\n    }\n\n    function editSem (currSem: number) {\n        setEditRow(currSem);\n    }\n\n    function submitSem () {\n        const tempList = subjectList;\n        tempList[editRow-1].id = editId;\n        tempList[editRow-1].name = editName;\n        tempList[editRow-1].credits = editCredits;\n        setSub(tempList);\n        alert(\"Submitted!\");\n        setEditRow(0);\n    }\n\n    let newRow = 0;\n\n\n    //<Row>ID {semesterID}</Row>\n    //<Row>ID {currID} SemesterNo. {currentSem} YearNo. {currYear}</Row>\n    return (\n        <Row><Card className=\"m-3\">\n            <Row><p className=\"text-center\"><strong>Semester {currentSem} Year {currYear}</strong></p></Row>\n            <table>\n                <thead><tr><th>Class ID</th><th>Class Name</th><th>Credits</th></tr></thead>\n                { subjectList.map((sbj: Subject) => {\n                    {newRow++;} // Track what row it is on\n                    return (\n                        editRow == newRow ? // If the current row was set to be edited, do this\n                            /** Editing bugs - Riyara:\n                             *  - Was Start Over a bit buggy before? If not I messed with it a little, sorry.\n                             *  - If you submit with nothing in there, it will use default values (0) or the previously used edit values\n                             *  - Probably isn't nice-looking that it says \"NaN\" if you put in a non-number for credits. Easily fixable I'd imagine\n                            */\n                            <tr key={sbj.key}> \n                                <td>\n                                    <InputGroup className=\"sbj-id\">\n                                        <FormControl\n                                            placeholder={sbj.id}\n                                            aria-label=\"ID\"\n                                            aria-describedby=\"basic-addon1\"\n                                            onChange={(event) => setEditId(event.target.value)}\n                                        />\n                                    </InputGroup>\n                                </td>\n                                <td>\n                                    <InputGroup className=\"sbj-name\">\n                                        <FormControl\n                                            placeholder={sbj.name}\n                                            aria-label=\"Name\"\n                                            aria-describedby=\"basic-addon1\"\n                                            onChange={(event) => setEditName(event.target.value)}\n                                        />\n                                    </InputGroup>\n                                </td>\n                                <td>\n                                    <InputGroup className=\"sbj-credits\">\n                                        <FormControl\n                                            placeholder={sbj.credits.toString()}\n                                            aria-label=\"Credits\"\n                                            aria-describedby=\"basic-addon1\"\n                                            onChange={(event) => setEditCredits(parseInt(event.target.value,10))}\n                                        />\n                                    </InputGroup>\n                                </td>\n                                <td><Button onClick={submitSem}>Submit</Button></td>\n                            </tr>\n                            : // otherwise do what it originally does\n                            <tr key={sbj.key}> \n                                <td>{sbj.id}</td>\n                                <td>{sbj.name}</td>\n                                <td>{sbj.credits}</td>\n                                <td><Button className=\"m-1\" onClick={() => editSem(sbj.key)}>Edit</Button></td>\n                            </tr>\n                    );\n                })}\n            </table>\n            <Row>\n                <Col><Button className=\"m-2\" data-testid=\"add-course-button\"onClick={addCourse}>Add Course</Button></Col>\n                <Col><Button className=\"m-2\" data-testid=\"delete-last-course-button\" onClick = {deleteCourse}><div className=\"btn-del-course\">Delete Course</div></Button></Col>\n                <Col><Button className=\"m-2\" data-testid=\"clear-courses-button\" onClick={clearCourse}>Clear Courses</Button></Col>\n                <Col><Button className=\"m-2\" data-testid=\"delete-this-semester-button\" onClick={deleteSem}>Delete This Semester</Button></Col>\n            </Row>\n        </Card></Row>\n    );\n    //Table setup credit to Dr. Bart\n}\n//<div className=\"btn-del-course\">","import { Row, Button} from \"react-bootstrap\";\nimport React from \"react\";\nimport { SubjectTable } from \"./SubjectViewer\";\nimport { Semester } from \"../interfaces/semester\";\nimport { useState } from \"react\";\n\n/*\nI think for this it should return a card and several subject components (which will need to be made for ease of adding classes).\nIt should have the buttons to add courses.\n3 columns 5 rows default?\n-NEEDS \"ADD CLASS\" BUTTON\n*/\n\nexport function SemesterTable() : JSX.Element {\n    //const defaultID = 1;\n    //const [currentSemester, setSemester] = useState<number>(0);\n    //const [currentYear, setYear] = useState<number>(0);\n    const [currentID, setID] = useState<number>(0);\n    const semestersPerYear = 2; // In case we want to change the number of semesters per year\n    //let newSemester: TableFace = \n    /*const semesters: TableFace[] = [\n        {semester: 1}\n    ];*/\n    //setSemester(currentSemester); // This exists solely to appease the linter.\n    //const [semesters, setSem] = useState<TableFace[]>([{semester: currentSemester}]);\n    //const [semesters, setSem] = useState<TableFace[]>([{id: currentID, semester: currentSemester, year: currentYear}]);\n    const [allSemesters, changeSemesters] = useState<Semester[]>([{id:currentID, semesterNum: 1, year: 1}]);\n    \n    const [semesterCounter, setSemesterCounter] = useState<number>(0);\n\n    function addSemester() {\n        const tempSemCounter = semesterCounter+1;\n        const tempid = currentID+1;\n        let tempsem = (1+tempSemCounter)%semestersPerYear;\n        /*if (currentID===0) {\n            tempsem = 2;\n        }*/\n        //let tempyear = currentYear;\n        const tempyear = Math.trunc(tempSemCounter/semestersPerYear)+1;\n        if (tempsem===0) {\n            tempsem+=semestersPerYear;\n        }\n        /*if ((tempid%semestersPerYear)===0) {\n            /*if (currentID===0) {\n                tempyear -= 1;\n            }\n            tempyear += 1;\n            setYear(tempyear);\n        }*/\n\n        //setSemester(tempsem);\n        setID(tempid);\n        const temp: Semester = {id: tempid, semesterNum: tempsem, year: tempyear};\n        //temp.semester = currentSemester;\n        const sems: Semester[] = [...allSemesters, temp];\n        //sems.push(temp);\n        changeSemesters(sems);\n        setSemesterCounter(tempSemCounter);\n    }\n    \n    function deleteSemester() {\n        setID(currentID-1);\n        const sems: Semester[] = [...allSemesters]; \n        sems.pop();\n        if (!sems[0]) {\n            setID(-1);\n            //setYear(0);\n            //setSemester(0);\n        }\n        changeSemesters(sems);\n    }\n    \n    function deleteAllSems() {\n        //setSemester(0);\n        //setYear(0);\n        setID(-1);\n        changeSemesters([]);\n        setSemesterCounter(-1);\n        //addSemester();\n    }\n\n    /*const tempSems: TableFace[] = semesters;\n    tempSems.push({semester: currentSemester});\n    addSem(tempSems);*/\n\n    return (\n        <>\n            <Row><Button data-testid=\"add-semester-button\" onClick={addSemester} className=\"m-3\">Add Semester</Button></Row>\n            <Row>\n                <table>\n                    { allSemesters.map((sem: Semester) => {\n                        return <tr key={sem.id}>\n                            <td><SubjectTable currentSem={sem.semesterNum} currYear={sem.year} currID={sem.id} semList={allSemesters} setSemList={changeSemesters} lastID={currentID} idSet={setID} semPer={semestersPerYear} semCount={semesterCounter} setSemCount={setSemesterCounter}></SubjectTable></td>\n                        </tr>;\n                    })}\n                </table>\n            </Row>\n            <Button data-testid=\"delete-last-semester-button\" onClick={deleteSemester} className=\"m-3\">Delete Last Semester</Button>\n            <Button data-testid=\"clear-all-semesters-button\" onClick={deleteAllSems} className=\"m-3\">Clear All Semesters</Button>\n        </>\n        //<SubjectTable currentSem={currentSemester}></SubjectTable>\n    );\n}\n\n","import React from \"react\";\n//import { useState } from \"react\";\n//import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./override.css\";\nimport { SemesterTable } from \"./components/SemesterViewer\";\nimport { Container } from \"react-bootstrap\";\n\n/*function App(): JSX.Element {\n\n    \n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                UD CIS Scheduler\n                <p>\n                    Edit <code>src/App.tsx</code> and save to reload.\n                </p>\n                <p>Dara McNally</p>\n                <p>Riyara Master</p>\n                <p>Trea Holley</p> \n            </header>\n        </div>\n    );\n}*/\n\nfunction App(): JSX.Element {\n\n    //TODO: Save/Load\n    //TODO: Export/Import (CSV/PDF?) (Do some research)\n    //TODO: Make it look nice\n    //TODO: Welcome screen\n\n    return (\n        <>\n            <div className=\"text-center\">\n                <h1>UDel CISC Degree Planner</h1>\n            </div>\n            <Container>\n                <SemesterTable></SemesterTable>\n            </Container>\n        </>\n    );\n}\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}