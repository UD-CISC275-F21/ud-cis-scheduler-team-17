{"version":3,"sources":["components/ClassTable.tsx","components/Required.tsx","components/SemesterViewer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ClassTable","currID","currentSem","currYear","semList","setSemList","lastID","idSet","semPer","setSemCount","classList","changingReqs","setReqList","allReqs","useState","currentId","setId","courseName","setcourseName","currentKey","setKey","editRow","setEditRow","editId","setEditId","editName","setEditName","editCredits","setEditCredits","submitSem","tempList","findIndex","course","courseID","name","credits","key","fixedReqs","filter","reqFilter","newRow","Row","Card","className","Col","style","fontSize","map","sbj","InputGroup","FormControl","placeholder","onChange","event","target","value","toString","parseInt","Button","onClick","currCourse","subject","fixedList","idx","semester","id","removedIdx","classes","deleteCourse","tempKey","temp","newClasses","addBack","i","length","semFilter","semesterNum","year","Math","trunc","Requirements","reqList","SemesterTable","currentID","setID","defaultClasses","semesterCounter","setSemesterCounter","LOCAL_STORAGE_SEMESTERS","INITIAL_SEMESTERS","REQUIREDCLASSES","editableReqs","setEditableReqs","rawSemesters","localStorage","getItem","JSON","parse","allSemesters","changeSemesters","tempSemCounter","tempid","tempsem","tempyear","sems","fontFamily","sem","setItem","stringify","App","Container","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e0ce2b62.chunk.js","sourcesContent":["import React from \"react\";\nimport { useState } from \"react\";\nimport {Class} from \"../interfaces/class\";\nimport { Card, Row, Button, Col, InputGroup, FormControl } from \"react-bootstrap\";\nimport { Semester } from \"../interfaces/semester\";\n\nexport function ClassTable({currID, currentSem, currYear, semList, setSemList, lastID, idSet, semPer, setSemCount, classList, changingReqs, setReqList, allReqs}:{\n    currID: number,\n    currentSem: number,\n    currYear: number,\n    semList: Semester[],\n    setSemList: (semList: Semester[]) => void,\n    lastID: number,\n    idSet: (num: number) => void,\n    semPer: number,\n    setSemCount: (num: number) => void\n    classList: Class[],\n    changingReqs: Class[],\n    setReqList: (newList: Class[]) => void,\n    allReqs: Class[]\n}) : JSX.Element {\n    const [currentId, setId] = useState<string>(\"CISC\");\n    const [courseName, setcourseName]  = useState<string>(\"ClassName\");\n    const [currentKey, setKey] = useState<number>(6);\n\n    const [editRow, setEditRow] = useState<number>(0);\n    const [editId, setEditId] = useState<string>(\"\");\n    const [editName, setEditName] = useState<string>(\"\");\n    const [editCredits, setEditCredits] = useState<number>(0);\n\n    function addCourse () {\n        const tempKey = currentKey + 1;\n        setKey(tempKey);\n        setId(currentId);\n        setcourseName(courseName);\n        const temp: Class = {courseID: currentId, name: courseName, credits: 3, key: tempKey};\n        const newClasses: Class[] = [...classList, temp];\n        // Need to fix key generation\n        classList = [...newClasses];\n        const fixedList: Semester[] = [...semList];\n        const idx = fixedList.findIndex((semester: Semester) => semester.id===currID);\n        fixedList[idx].classes = classList;\n        setSemList(fixedList);\n    }\n\n    function deleteCourse (currentKey: number) {\n        const fixedList: Semester[] = [...semList];\n        const idx = fixedList.findIndex((semester: Semester) => semester.id===currID);\n        const removedIdx = fixedList[idx].classes.findIndex((course: Class)=>course.key===currentKey);\n        if (allReqs.findIndex((course: Class)=>course.courseID===fixedList[idx].classes[removedIdx].courseID)!==-1 && changingReqs.findIndex((course: Class)=>course.courseID===fixedList[idx].classes[removedIdx].courseID)===-1) {\n            setReqList([...changingReqs, fixedList[idx].classes[removedIdx]]);\n        }\n        fixedList[idx].classes = classList.filter((sbj) => sbj.key !== currentKey);\n        setSemList(fixedList);\n    }\n\n    function clearCourse () {\n        setKey(0);\n        let addBack: Class[] = [...changingReqs];\n        for(let i=0; i<classList.length; i++) {\n            const temp: Class = classList[i];\n            if (allReqs.findIndex((course: Class)=>course.courseID===temp.courseID)!==-1 && changingReqs.findIndex((course: Class)=>course.courseID===temp.courseID)===-1) {\n                addBack = [...addBack, temp];\n            }\n        }\n        setReqList(addBack);\n        classList = [];\n        const fixedList: Semester[] = [...semList];\n        const idx = fixedList.findIndex((semester: Semester) => semester.id===currID);\n        fixedList[idx].classes = classList;\n        setSemList(fixedList);\n    }\n\n    function deleteSem () {\n        idSet(lastID+1);\n        let addBack: Class[] = [...changingReqs];\n        for(let i=0; i<classList.length; i++) {\n            const temp: Class = classList[i];\n            if (allReqs.findIndex((course: Class)=>course.courseID===temp.courseID)!==-1 && changingReqs.findIndex((course: Class)=>course.courseID===temp.courseID)===-1) {\n                addBack = [...addBack, temp];\n            }\n        }\n        setReqList(addBack);\n        const fixedList = semList.filter((semFilter) => semFilter.id!==currID);\n        for (let i=0, temp:Semester; fixedList[i]; i++) {\n            temp = fixedList[i];\n            temp.semesterNum = (i%semPer)+1;\n            temp.year = Math.trunc(i/semPer)+1;\n        }\n        setSemCount(fixedList.length-1);\n        setSemList(fixedList);\n    }\n\n    function editCourse (currCourse: number) {\n        setEditRow(currCourse);\n    }\n\n    function submitSem () {\n        const tempList = [...classList];\n        if (allReqs.findIndex((course: Class)=>course.courseID===tempList[editRow-1].courseID)!==-1 && changingReqs.findIndex((course: Class)=>course.courseID===editId)===-1 && editId!==\"\") {\n            setReqList([...changingReqs, {courseID: tempList[editRow-1].courseID, name: \"\", credits: 3, key:-1}]);\n        }\n        if (editId!==\"\") {\n            tempList[editRow-1].courseID = editId;\n        }\n        if (editName!==\"\") {\n            tempList[editRow-1].name = editName;\n        }\n        if (editCredits!==0) {\n            tempList[editRow-1].credits = editCredits;\n        }\n        classList = tempList;\n        if (changingReqs.findIndex((course: Class) => course.courseID===editId)!==-1) {\n            const fixedReqs = changingReqs.filter((reqFilter)=>reqFilter.courseID!==editId);\n            setReqList(fixedReqs);\n        }\n        setEditRow(0);\n        setEditId(\"\");\n        setEditName(\"\");\n        setEditCredits(0);\n\n    }\n\n    let newRow = 0;\n\n    // THE BELOW COMMENTS ARE FOR DEVELOPMENTAL TESTING\n    //<Row>ID {semesterID}</Row>\n    //<Row>ID {currID} SemesterNo. {currentSem} YearNo. {currYear}</Row>\n    return (\n        <Row><Card className=\"text-center m-3\">\n            <Col>\n                <p className=\"text-center\" style={{fontSize:17}}><u><strong>Year {currYear} Semester {currentSem}</strong></u></p>\n            </Col>\n            <table>\n                <thead><tr><th>Class ID</th><th>Class Name</th><th>Credits</th></tr></thead>\n                { classList.map((sbj: Class) => {\n                    {newRow++;} // Track what row it is on\n                    return (\n                        editRow == newRow ? // If the current row was set to be edited, do this\n                            /** Editing bugs - Riyara:\n                             *  - Was Start Over a bit buggy before? If not I messed with it a little, sorry.\n                             *  - If you submit with nothing in there, it will use default values (0) or the previously used edit values\n                             *  - Probably isn't nice-looking that it says \"NaN\" if you put in a non-number for credits. Easily fixable I'd imagine\n                            */\n                            <tr key={sbj.key}> \n                                <td>\n                                    <InputGroup className=\"sbj-id\">\n                                        <FormControl\n                                            placeholder={sbj.courseID}\n                                            aria-label=\"ID\"\n                                            aria-describedby=\"basic-addon1\"\n                                            data-testid=\"input-group\"\n                                            onChange={(event) => setEditId(event.target.value)}\n                                        />\n                                    </InputGroup>\n                                </td>\n                                <td>\n                                    <InputGroup className=\"sbj-name\">\n                                        <FormControl\n                                            placeholder={sbj.name}\n                                            aria-label=\"Name\"\n                                            aria-describedby=\"basic-addon1\"\n                                            data-testid=\"input-group\"\n                                            onChange={(event) => setEditName(event.target.value)}\n                                        />\n                                    </InputGroup>\n                                </td>\n                                <td>\n                                    <InputGroup className=\"sbj-credits\">\n                                        <FormControl\n                                            placeholder={sbj.credits.toString()}\n                                            aria-label=\"Credits\"\n                                            aria-describedby=\"basic-addon1\"\n                                            data-testid=\"input-group\"\n                                            onChange={(event) => setEditCredits(parseInt(event.target.value,10))}\n                                        />\n                                    </InputGroup>\n                                </td>\n                                <td><Button data-testid=\"submit-button\" onClick={submitSem}>Submit</Button></td>\n                            </tr>\n                            : // otherwise do what it originally does\n                            <tr key={sbj.key}> \n                                <td>{sbj.courseID}</td>\n                                <td>{sbj.name}</td>\n                                <td>{sbj.credits}</td>\n                                <Button className=\"m-1\" data-testid=\"edit-course-button\" onClick={() => editCourse(classList.findIndex((subject: Class)=>subject.key===sbj.key)+1)}>Edit</Button>\n                                <Button className=\"btn btn-small-delete rounded-circle m-1\" data-testid=\"delete-course-button\" onClick={() => deleteCourse(sbj.key)}>X</Button>\n                            </tr>\n                    );\n                })}\n            </table>\n            <Row>\n                <Col><Button className=\"m-2\" data-testid=\"add-course-button\" onClick={addCourse}>Add Course</Button></Col>\n                <Col><Button className=\"m-2\" data-testid=\"clear-courses-button\" onClick={clearCourse}>Clear Courses</Button></Col>\n                <Col><Button className=\"btn btn-delete m-2\" data-testid=\"delete-this-semester-button\" onClick={deleteSem}>Delete Semester</Button></Col>\n            </Row>\n        </Card></Row>\n    );\n    //Table setup credit to Dr. Bart\n    //<Col><Button className=\"m-2\" data-testid=\"delete-last-course-button\" onClick = {deleteLastCourse}>Delete Course</Button></Col>\n}","import React from \"react\";\nimport { Class } from \"../interfaces/class\";\nimport { Card } from \"react-bootstrap\";\n\nexport function Requirements({reqList}: {\n    reqList: Class[]\n}) : JSX.Element {\n    \n    return (\n        <>\n            <Card className=\"text-center\">\n                <u><strong>Required Courses:</strong></u>\n                <table>\n                    { reqList.map((course: Class) => {\n                        return <tr key={course.courseID}>\n                            <td>{course.courseID}</td>\n                        </tr>;\n                    })}\n                </table>\n            </Card>\n        </>\n    );\n}","import { Row, Button, Col } from \"react-bootstrap\";\nimport React from \"react\";\nimport { ClassTable } from \"./ClassTable\";\nimport { Semester } from \"../interfaces/semester\";\nimport { useState } from \"react\";\nimport REQUIREDCLASSES  from \"../assets/RequiredCourseList.json\";\nimport { Requirements } from \"./Required\";\nimport { Class } from \"../interfaces/class\";\n\nexport function SemesterTable() : JSX.Element {\n    const [currentID, setID] = useState<number>(0);\n    const semestersPerYear = 2; // In case we want to change the number of semesters per year\n    const defaultClasses = [{courseID: \"CISC\", name: \"Class Name\", credits: 3, key: 1},{courseID: \"CISC\", name: \"Class Name\", credits: 3, key: 2},{courseID: \"CISC\", name: \"Class Name\", credits: 3, key: 3},{courseID: \"CISC\", name: \"Class Name\", credits: 3, key: 4},{courseID: \"CISC\", name: \"Class Name\", credits: 3, key: 5}];\n    const [semesterCounter, setSemesterCounter] = useState<number>(0);\n    const LOCAL_STORAGE_SEMESTERS = \"schedule\";\n    const INITIAL_SEMESTERS: Semester[] = [\n        {id:currentID, semesterNum: 1, year: 1, classes: [{courseID: \"CISC\", name: \"Class Name\", credits: 3, key: 1},{courseID: \"CISC\", name: \"Class Name\", credits: 3, key: 2},{courseID: \"CISC\", name: \"Class Name\", credits: 3, key: 3},{courseID: \"CISC\", name: \"Class Name\", credits: 3, key: 4},{courseID: \"CISC\", name: \"Class Name\", credits: 3, key: 5}]}\n        //The list of classes is important because it gets rid of the issue where the first two semesters' classes function as the same entity.\n    ];\n    const [editableReqs, setEditableReqs] = useState<Class[]>([...REQUIREDCLASSES]);\n\n    function getLocalStorageSemesters(): Semester[] {\n        const rawSemesters: string|null = localStorage.getItem(LOCAL_STORAGE_SEMESTERS);\n        if (rawSemesters === null) {\n            return [...INITIAL_SEMESTERS];\n        } else {\n            return JSON.parse(rawSemesters);\n        }\n    }\n\n    const [allSemesters, changeSemesters] = useState<Semester[]>(getLocalStorageSemesters);\n\n    function addSemester() {\n        const tempSemCounter = semesterCounter+1;\n        const tempid = currentID+1;\n        let tempsem = (1+tempSemCounter)%semestersPerYear;\n        const tempyear = Math.trunc(tempSemCounter/semestersPerYear)+1;\n        if (tempsem===0) {\n            tempsem+=semestersPerYear;\n        }\n\n        setID(tempid);\n        const temp: Semester = {id: tempid, semesterNum: tempsem, year: tempyear, classes: defaultClasses};\n        const sems: Semester[] = [...allSemesters, temp];\n        changeSemesters(sems);\n        setSemesterCounter(tempSemCounter);\n    }\n    \n    function deleteAllSems() {\n        setID(-1);\n        setEditableReqs([...REQUIREDCLASSES]);\n        changeSemesters([]);\n        setSemesterCounter(-1);\n    }\n\n    // Credit to https://stackoverflow.com/questions/66801478/write-to-a-text-or-json-file-react-node for the JSON saving function\n    /*\n    function saveToJSON() {\n        const fileData = JSON.stringify(allSemesters);\n        const blob = new Blob([fileData], {type: \"text/plain\"});\n        const url = URL.createObjectURL(blob);\n        const link = document.createElement(\"a\");\n        link.download = \"filename.json\";\n        link.href = url;\n        link.click();\n    }\n    */\n\n    function saveToLocal() {\n        localStorage.setItem(LOCAL_STORAGE_SEMESTERS, JSON.stringify(allSemesters));\n    }\n\n\n    return (\n        <>\n            <Row><Button data-testid=\"add-semester-button\" onClick={addSemester} className=\"btn btn-add m-3\" style={{fontFamily: \"Courier New\"}}>Add Semester</Button></Row>\n            <Row>\n                <Col>\n                    <Row className=\"m-2\">\n                        <table>\n                            { allSemesters.map((sem: Semester) => {\n                                return <tr key={sem.id}>\n                                    <td><ClassTable currentSem={sem.semesterNum} currYear={sem.year} currID={sem.id} semList={allSemesters} setSemList={changeSemesters} lastID={currentID} idSet={setID} semPer={semestersPerYear} setSemCount={setSemesterCounter} classList={sem.classes} changingReqs={editableReqs} setReqList={setEditableReqs} allReqs={REQUIREDCLASSES}></ClassTable></td>\n                                </tr>;\n                            })}\n                        </table>\n                    </Row>\n                </Col>\n                <Col className=\"col-md-2\">\n                    <Requirements reqList={editableReqs}></Requirements>\n                </Col>\n            </Row>\n            <Button data-testid=\"clear-all-semesters-button\" onClick={deleteAllSems} className=\"btn btn-delete m-3\" style={{fontFamily: \"Courier New\"}}>Clear All Semesters</Button>\n            <Button data-testid=\"save-to-local-button\" onClick={saveToLocal} className=\"btn btn-save m-3\">Save Layout</Button>\n        </>\n        //<Button data-testid=\"save-to-json-button\" onClick={saveToJSON} className=\"m-3\">Save</Button>\n        //<Button data-testid=\"load-from-json-button\" onClick={Upload} className=\"m-3\">Load</Button>\n    );\n}\n\n","import React from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./override.css\";\nimport { SemesterTable } from \"./components/SemesterViewer\";\nimport { Container } from \"react-bootstrap\";\n\nfunction App(): JSX.Element {\n\n    return (\n        <>\n            <div className=\"text-center\" style={{fontFamily: \"Courier New\"}}>\n                <h1><strong>UDel CISC Degree Planner</strong></h1>\n                <p>Welcome to the University of Delaware CISC Degree Planner! Here you can add/delete semesters and courses from your degree plan.</p>\n                <h5>Click Add Semester or Edit to get started!</h5>\n            </div>\n            <Container>\n                <SemesterTable></SemesterTable>\n            </Container>\n        </>\n    );\n}\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}