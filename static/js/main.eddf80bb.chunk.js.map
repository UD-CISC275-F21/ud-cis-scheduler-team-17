{"version":3,"sources":["components/SubjectViewer.tsx","components/SemesterViewer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SubjectTable","currID","currentSem","currYear","semList","setSemList","thisID","idSet","semPer","useState","currentId","setId","courseName","setcourseName","currentKey","setKey","id","name","credits","key","subjectList","setSub","editRow","setEditRow","editId","setEditId","editName","setEditName","editCredits","setEditCredits","submitSem","tempList","alert","newRow","Card","Row","map","sbj","InputGroup","className","FormControl","placeholder","onChange","event","target","value","toString","parseInt","Button","onClick","currSem","Col","tempKey","temp","sub","pop","fixedList","splice","i","semesterNum","year","SemesterTable","currentID","setID","semesters","setSem","tempid","tempsem","tempyear","Math","trunc","sems","sem","App","Container","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eddf80bb.chunk.js","sourcesContent":["import React from \"react\";\nimport { useState } from \"react\";\nimport {Subject} from \"../interfaces/subject\";\nimport { Card, Row, Button, Col, InputGroup, FormControl } from \"react-bootstrap\";\nimport { TableFace } from \"../interfaces/semester\";\n\nexport function SubjectTable({currID, currentSem, currYear, semList, setSemList, thisID, idSet, semPer}:{\n    currID: number,\n    currentSem: number,\n    currYear: number,\n    semList: TableFace[],\n    setSemList: (semList: TableFace[]) => void,\n    thisID: number,\n    idSet: (num: number) => void,\n    semPer: number\n}) : JSX.Element {\n    const [currentId, setId] = useState<string>(\"CISC\");\n    const [courseName, setcourseName]  = useState<string>(\"ClassName\");\n    const [currentKey, setKey] = useState<number>(5);\n    const [subjectList, setSub] = useState<Subject[]> ([{id: currentId, name: courseName, credits: 3, key: 1},{id: currentId, name: courseName, credits: 3, key: 2},{id: currentId, name: courseName, credits: 3, key: 3},{id: currentId, name: courseName, credits: 3, key: 4},{id: currentId, name: courseName, credits: 3, key: 5}]);\n\n    const [editRow, setEditRow] = useState<number>(0);\n    const [editId, setEditId] = useState<string>(\"\");\n    const [editName, setEditName] = useState<string>(\"\");\n    const [editCredits, setEditCredits] = useState<number>(0);\n\n    function addCourse () {\n        const tempKey = currentKey + 1;\n        setKey(tempKey);\n        setId(currentId);\n        setcourseName(courseName);\n        const temp: Subject = {id: currentId, name: courseName, credits: 3, key: tempKey};\n        const sub: Subject[] = [...subjectList, temp];\n        //sub.push(temp);\n        setSub(sub);\n        // Need to fix key generation\n    }\n\n    function deleteCourse () {\n        setKey(currentKey - 1);\n        const sub: Subject[] = [...subjectList];\n        sub.pop();\n        setSub(sub);\n    }\n\n    /*function clearCourse () {\n        setKey(0);\n        setSub([{id: currentId, name: courseName, credits: 3, key: 0}]);\n    }*/\n\n    function deleteSem () {\n        //idSet(thisID+1);\n        const fixedList: TableFace[] = [...semList];\n        //const idx = fixedList.indexOf({id: currID, semester: currentSem, year: currYear});\n        //const idx = fixedList.indexOf(this);\n        fixedList.splice(currID, 1);\n        if (fixedList[0]) {\n            let temp: TableFace; \n            for (let i=currID; fixedList[i]; i++) {\n                temp = fixedList[i];\n                temp.id = i;\n                temp.semesterNum -= 1;\n                if (temp.semesterNum==0) {\n                    temp.year -= 1;\n                    temp.semesterNum = semPer;\n                }\n                fixedList[i] = temp;\n            }\n            idSet(thisID-1);\n            //setSemList(fixedList);\n        } else {\n            idSet(-1);\n            //setSemList(fixedList);\n        }\n        setSemList(fixedList);\n    }\n\n    function editSem (currSem: number) {\n        setEditRow(currSem);\n    }\n\n    function submitSem () {\n        const tempList = subjectList;\n        tempList[editRow-1].id = editId;\n        tempList[editRow-1].name = editName;\n        tempList[editRow-1].credits = editCredits;\n        setSub(tempList);\n        alert(\"Submitted!\");\n        setEditRow(0);\n    }\n\n    let newRow = 0;\n\n\n    //<Row>ID {currID}</Row>\n    return (\n        <Card>\n            <Row><strong>Semester {currentSem} Year {currYear}</strong></Row>\n            <table>\n                <thead><tr><th>Class ID</th><th>Class Name</th><th>Credits</th></tr></thead>\n                { subjectList.map((sbj: Subject) => {\n                    {newRow++;} // Track what row it is on\n                    return (\n                        editRow == newRow ? // If the current row was set to be edited, do this\n                            /** Editing bugs - Riyara:\n                             *  - Was Start Over a bit buggy before? If not I messed with it a little, sorry.\n                             *  - If you submit with nothing in there, it will use default values (0) or the previously used edit values\n                             *  - Probably isn't nice-looking that it says \"NaN\" if you put in a non-number for credits. Easily fixable I'd imagine\n                            */\n                            <tr key={sbj.key}> \n                                <td>\n                                    <InputGroup className=\"sbj-id\">\n                                        <FormControl\n                                            placeholder={sbj.id}\n                                            aria-label=\"ID\"\n                                            aria-describedby=\"basic-addon1\"\n                                            onChange={(event) => setEditId(event.target.value)}\n                                        />\n                                    </InputGroup>\n                                </td>\n                                <td>\n                                    <InputGroup className=\"sbj-name\">\n                                        <FormControl\n                                            placeholder={sbj.name}\n                                            aria-label=\"Name\"\n                                            aria-describedby=\"basic-addon1\"\n                                            onChange={(event) => setEditName(event.target.value)}\n                                        />\n                                    </InputGroup>\n                                </td>\n                                <td>\n                                    <InputGroup className=\"sbj-credits\">\n                                        <FormControl\n                                            placeholder={sbj.credits.toString()}\n                                            aria-label=\"Credits\"\n                                            aria-describedby=\"basic-addon1\"\n                                            onChange={(event) => setEditCredits(parseInt(event.target.value,10))}\n                                        />\n                                    </InputGroup>\n                                </td>\n                                <td><Button onClick={submitSem}>Submit</Button></td>\n                            </tr>\n                            : // otherwise do what it originally does\n                            <tr key={sbj.key}> \n                                <td>{sbj.id}</td>\n                                <td>{sbj.name}</td>\n                                <td>{sbj.credits}</td>\n                                <td><Button onClick={() => editSem(sbj.key)}>Edit</Button></td>\n                            </tr>\n                    );\n                })}\n            </table>\n            <Row>\n                <Col><Button data-testid=\"add-course-button\"onClick={addCourse}>Add Course</Button></Col>\n                <Col><Button data-testid=\"delete-last-course-button\"onClick = {deleteCourse}>Delete Course</Button></Col>\n                <Col><Button data-testid=\"delete-this-semester-button\" onClick={deleteSem}>Delete This Semester</Button></Col>\n            </Row>\n        </Card>\n    );\n    //Table setup credit to Dr. Bart\n}","import { Row, Button } from \"react-bootstrap\";\nimport React from \"react\";\nimport { SubjectTable } from \"./SubjectViewer\";\nimport { TableFace } from \"../interfaces/semester\";\nimport { useState } from \"react\";\n\n/*\nI think for this it should return a card and several subject components (which will need to be made for ease of adding classes).\nIt should have the buttons to add courses.\n3 columns 5 rows default?\n-NEEDS \"ADD CLASS\" BUTTON\n*/\nexport function SemesterTable() : JSX.Element {\n    //const defaultID = 1;\n    //const [currentSemester, setSemester] = useState<number>(0);\n    //const [currentYear, setYear] = useState<number>(0);\n    const [currentID, setID] = useState<number>(0);\n    //const [currentki, setki] = useState<number>(1);\n    const semestersPerYear = 2; // In case we want to change the number of semesters per year\n    //let newSemester: TableFace = \n    /*const semesters: TableFace[] = [\n        {semester: 1}\n    ];*/\n    //setSemester(currentSemester); // This exists solely to appease the linter.\n    //const [semesters, setSem] = useState<TableFace[]>([{semester: currentSemester}]);\n    //const [semesters, setSem] = useState<TableFace[]>([{id: currentID, semester: currentSemester, year: currentYear}]);\n    const [semesters, setSem] = useState<TableFace[]>([{id:currentID, semesterNum: 1, year: 1}]);\n\n    function addSemester() {\n        const tempid = currentID+1;\n        let tempsem = (1+tempid)%semestersPerYear;\n        /*if (currentID===0) {\n            tempsem = 2;\n        }*/\n        //let tempyear = currentYear;\n        const tempyear = Math.trunc(tempid/semestersPerYear)+1;\n        if (tempsem===0) {\n            tempsem+=semestersPerYear;\n        }\n        /*if ((tempid%semestersPerYear)===0) {\n            /*if (currentID===0) {\n                tempyear -= 1;\n            }\n            tempyear += 1;\n            setYear(tempyear);\n        }*/\n\n        //setSemester(tempsem);\n        setID(tempid);\n        const temp: TableFace = {id: tempid, semesterNum: tempsem, year: tempyear};\n        //temp.semester = currentSemester;\n        const sems: TableFace[] = [...semesters, temp];\n        //sems.push(temp);\n        setSem(sems);\n    }\n    \n    function deleteSemester() {\n        setID(currentID-1);\n        const sems: TableFace[] = [...semesters]; \n        sems.pop();\n        if (!sems[0]) {\n            setID(-1);\n            //setYear(0);\n            //setSemester(0);\n        }\n        setSem(sems);\n    }\n    \n    function deleteAllSems() {\n        //setSemester(0);\n        //setYear(0);\n        setID(0);\n        setSem([{id:0, semesterNum: 1, year: 1}]);\n        //addSemester();\n    }\n\n    /*const tempSems: TableFace[] = semesters;\n    tempSems.push({semester: currentSemester});\n    addSem(tempSems);*/\n\n    return (\n        <>\n            <Row><Button data-testid=\"add-semester-button\" onClick={addSemester} className=\"m-3\">Add Semester</Button></Row>\n            <Row>\n                <table>\n                    { semesters.map((sem: TableFace) => {\n                        return <tr key={sem.id}>\n                            <td><SubjectTable currentSem={sem.semesterNum} currYear={sem.year} currID={sem.id} semList={semesters} setSemList={setSem} thisID={currentID} idSet={setID} semPer={semestersPerYear}></SubjectTable></td>\n                        </tr>;\n                    })}\n                </table>\n            </Row>\n            <Button data-testid=\"delete-last-semester-button\" onClick={deleteSemester} className=\"m-3\">Delete Last Semester</Button>\n            <Button data-testid=\"start-over-button\" onClick={deleteAllSems} className=\"m-3\">Start Over</Button>\n        </>\n        //<SubjectTable currentSem={currentSemester}></SubjectTable>\n    );\n}\n\n","import React from \"react\";\n//import { useState } from \"react\";\n//import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { SemesterTable } from \"./components/SemesterViewer\";\nimport { Container } from \"react-bootstrap\";\n\n/*function App(): JSX.Element {\n\n    \n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                UD CIS Scheduler\n                <p>\n                    Edit <code>src/App.tsx</code> and save to reload.\n                </p>\n                <p>Dara McNally</p>\n                <p>Riyara Master</p>\n                <p>Trea Holley</p> \n            </header>\n        </div>\n    );\n}*/\n\nfunction App(): JSX.Element {\n\n    \n\n    return (\n        <Container>\n            <SemesterTable></SemesterTable>\n        </Container>\n    );\n}\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}