{"version":3,"sources":["components/SubjectViewer.tsx","components/Table.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SubjectTable","currID","currentSem","currYear","semList","setSemList","thisID","idSet","semPer","useState","currentId","setId","courseName","setcourseName","currentKey","setKey","id","name","credits","key","subjectList","setSub","editRow","setEditRow","submitSem","alert","newRow","Card","Row","map","sbj","InputGroup","className","FormControl","placeholder","toString","Button","onClick","currSem","Col","tempKey","temp","sub","push","pop","fixedList","splice","i","semester","year","OurTable","currentID","setID","semesters","setSem","tempid","tempsem","tempyear","Math","trunc","sems","sem","App","Container","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d048b0f2.chunk.js","sourcesContent":["import React from \"react\";\nimport { useState } from \"react\";\nimport {Subject} from \"../interfaces/subject\";\nimport { Card, Row, Button, Col, InputGroup, FormControl } from \"react-bootstrap\";\nimport { TableFace } from \"../interfaces/tableface\";\n\nexport function SubjectTable({currID, currentSem, currYear, semList, setSemList, thisID, idSet, semPer}:{\n    currID: number,\n    currentSem: number,\n    currYear: number,\n    semList: TableFace[],\n    setSemList: (semList: TableFace[]) => void,\n    thisID: number,\n    idSet: (num: number) => void,\n    semPer: number\n}) : JSX.Element {\n    const [currentId, setId] = useState<string>(\"CISC\");\n    const [courseName, setcourseName]  = useState<string>(\"ClassName\");\n    const [currentKey, setKey] = useState<number>(0);\n    const [subjectList, setSub] = useState<Subject[]> ([{id: currentId, name: courseName, credits: 3, key: 1},{id: currentId, name: courseName, credits: 3, key: 2},{id: currentId, name: courseName, credits: 3, key: 3},{id: currentId, name: courseName, credits: 3, key: 4},{id: currentId, name: courseName, credits: 3, key: 5}]);\n\n    const [editRow, setEditRow] = useState<number>(0);\n\n    function addCourse () {\n        const tempKey = currentKey + 1;\n        setKey(tempKey);\n        setId(currentId);\n        setcourseName(courseName);\n        const temp: Subject = {id: currentId, name: courseName, credits: 3, key: tempKey};\n        const sub: Subject[] = subjectList;\n        sub.push(temp);\n        setSub(sub);\n        // Need to fix key generation\n    }\n\n    function deleteCourse () {\n        setKey(currentKey - 1);\n        const sub: Subject[] = subjectList;\n        sub.pop();\n        setSub(sub);\n    }\n\n    function deleteSem () {\n        //idSet(thisID+1);\n        const fixedList: TableFace[] = semList;\n        //const idx = fixedList.indexOf({id: currID, semester: currentSem, year: currYear});\n        //const idx = fixedList.indexOf(this);\n        fixedList.splice(currID, 1);\n        if (fixedList[0]) {\n            let temp: TableFace; \n            for (let i=currID; fixedList[i]; i++) {\n                temp = fixedList[i];\n                temp.id = i;\n                temp.semester -= 1;\n                if (temp.semester==0) {\n                    temp.year -= 1;\n                    temp.semester = semPer;\n                }\n                fixedList[i] = temp;\n            }\n            idSet(thisID-1);\n            setSemList(fixedList);\n        } else {\n            idSet(-1);\n        }\n    }\n\n    function editSem (currSem: number) {\n        setEditRow(currSem);\n        alert(\"editSem has been used!\");\n    }\n\n    function submitSem () {\n        alert(\"Submitted!\");\n        setEditRow(0);\n    }\n\n    let newRow = 0;\n\n\n    //<Row>ID {currID}</Row>\n    return (\n        <Card>\n            <Row><strong>Semester {currentSem} Year {currYear}</strong></Row>\n            <table>\n                <tr><th>Class ID</th><th>Class Name</th><th>Credits</th></tr>\n                { subjectList.map((sbj: Subject) => {\n                    {newRow++;} // Track what row it is on\n                    return (\n                        editRow == newRow ? // If the current row was set to be edited, do this\n                            <tr key={sbj.id}> \n                                <td>\n                                    <InputGroup className=\"sbj-id\">\n                                        <FormControl\n                                            placeholder={sbj.id}\n                                            aria-label=\"ID\"\n                                            aria-describedby=\"basic-addon1\"\n                                        />\n                                    </InputGroup>\n                                </td>\n                                <td>\n                                    <InputGroup className=\"sbj-name\">\n                                        <FormControl\n                                            placeholder={sbj.name}\n                                            aria-label=\"Name\"\n                                            aria-describedby=\"basic-addon1\"\n                                        />\n                                    </InputGroup>\n                                </td>\n                                <td>\n                                    <InputGroup className=\"sbj-credits\">\n                                        <FormControl\n                                            placeholder={sbj.credits.toString()}\n                                            aria-label=\"Credits\"\n                                            aria-describedby=\"basic-addon1\"\n                                        />\n                                    </InputGroup>\n                                </td>\n                                <td><Button onClick={submitSem}>Submit</Button></td>\n                            </tr>\n                            : // otherwise do what it originally does\n                            <tr key={sbj.id}> \n                                <td>{sbj.id}</td>\n                                <td>{sbj.name}</td>\n                                <td>{sbj.credits}</td>\n                                <td><Button onClick={() => editSem(sbj.key)}>Edit</Button></td>\n                            </tr>\n                    );\n                })}\n            </table>\n            <Row>\n                <Col><Button onClick={addCourse}>Add Course</Button></Col>\n                <Col><Button onClick = {deleteCourse}>Delete Course</Button></Col>\n                <Col><Button onClick={deleteSem}>Delete This Semester</Button></Col>\n            </Row>\n        </Card>\n    );\n    //Table setup credit to Dr. Bart\n}","import { Row, Button } from \"react-bootstrap\";\nimport React from \"react\";\nimport { SubjectTable } from \"./SubjectViewer\";\nimport { TableFace } from \"../interfaces/tableface\";\nimport { useState } from \"react\";\n\n/*\nI think for this it should return a card and several subject components (which will need to be made for ease of adding classes).\nIt should have the buttons to add courses.\n3 columns 5 rows default?\n-NEEDS \"ADD CLASS\" BUTTON\n*/\nexport function OurTable() : JSX.Element {\n    //const defaultID = 1;\n    //const [currentSemester, setSemester] = useState<number>(0);\n    //const [currentYear, setYear] = useState<number>(0);\n    const [currentID, setID] = useState<number>(0);\n    //const [currentki, setki] = useState<number>(1);\n    const semestersPerYear = 2; // In case we want to change the number of semesters per year\n    //let newSemester: TableFace = \n    /*const semesters: TableFace[] = [\n        {semester: 1}\n    ];*/\n    //setSemester(currentSemester); // This exists solely to appease the linter.\n    //const [semesters, setSem] = useState<TableFace[]>([{semester: currentSemester}]);\n    //const [semesters, setSem] = useState<TableFace[]>([{id: currentID, semester: currentSemester, year: currentYear}]);\n    const [semesters, setSem] = useState<TableFace[]>([{id:currentID, semester: 1, year: 1}]);\n\n    function addSemester() {\n        const tempid = currentID+1;\n        let tempsem = (1+tempid)%semestersPerYear;\n        /*if (currentID===0) {\n            tempsem = 2;\n        }*/\n        //let tempyear = currentYear;\n        const tempyear = Math.trunc(tempid/semestersPerYear)+1;\n        if (tempsem===0) {\n            tempsem+=semestersPerYear;\n        }\n        /*if ((tempid%semestersPerYear)===0) {\n            /*if (currentID===0) {\n                tempyear -= 1;\n            }\n            tempyear += 1;\n            setYear(tempyear);\n        }*/\n\n        //setSemester(tempsem);\n        setID(tempid);\n        const temp: TableFace = {id: tempid, semester: tempsem, year: tempyear};\n        //temp.semester = currentSemester;\n        const sems: TableFace[] = [...semesters, temp];\n        //sems.push(temp);\n        setSem(sems);\n    }\n    \n    function deleteSemester() {\n        setID(currentID-1);\n        const sems: TableFace[] = [...semesters]; \n        sems.pop();\n        if (!sems[0]) {\n            setID(-1);\n            //setYear(0);\n            //setSemester(0);\n        }\n        setSem(sems);\n    }\n    \n    function deleteAllSems() {\n        //setSemester(0);\n        //setYear(0);\n        setID(0);\n        setSem([{id:0, semester: 1, year: 1}]);\n        //addSemester();\n    }\n\n    /*const tempSems: TableFace[] = semesters;\n    tempSems.push({semester: currentSemester});\n    addSem(tempSems);*/\n\n    return (\n        <>\n            <Row><Button onClick={addSemester} className=\"m-3\">Add Semester</Button></Row>\n            <Row>\n                <table>\n                    { semesters.map((sem: TableFace) => {\n                        return <tr key={sem.id}>\n                            <td><SubjectTable currentSem={sem.semester} currYear={sem.year} currID={sem.id} semList={semesters} setSemList={setSem} thisID={currentID} idSet={setID} semPer={semestersPerYear}></SubjectTable></td>\n                        </tr>;\n                    })}\n                </table>\n            </Row>\n            <Button onClick={deleteSemester} className=\"m-3\">Delete Last Semester</Button>\n            <Button onClick={deleteAllSems} className=\"m-3\">Start Over</Button>\n        </>\n        //<SubjectTable currentSem={currentSemester}></SubjectTable>\n    );\n}\n\n","import React from \"react\";\n//import { useState } from \"react\";\n//import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { OurTable } from \"./components/Table\";\nimport { Container } from \"react-bootstrap\";\n\n/*function App(): JSX.Element {\n\n    \n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                UD CIS Scheduler\n                <p>\n                    Edit <code>src/App.tsx</code> and save to reload.\n                </p>\n                <p>Dara McNally</p>\n                <p>Riyara Master</p>\n                <p>Trea Holley</p> \n            </header>\n        </div>\n    );\n}*/\n\nfunction App(): JSX.Element {\n\n    \n\n    return (\n        <Container>\n            <OurTable></OurTable>\n        </Container>\n    );\n}\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}