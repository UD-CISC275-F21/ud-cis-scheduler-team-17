{"version":3,"sources":["components/ClassTable.tsx","components/SemesterViewer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ClassTable","currID","currentSem","currYear","semList","setSemList","lastID","idSet","semPer","semCount","setSemCount","classList","useState","currentId","setId","courseName","setcourseName","currentKey","setKey","editRow","setEditRow","editId","setEditId","editName","setEditName","editCredits","setEditCredits","submitSem","tempList","id","name","credits","newRow","Row","Card","className","map","sbj","InputGroup","FormControl","placeholder","onChange","event","target","value","toString","parseInt","Button","onClick","key","currSem","newSem","filter","fixedList","idx","findIndex","semester","classes","deleteCourse","Col","tempKey","temp","newClasses","pop","splice","i","semesterNum","year","SemesterTable","currentID","setID","defaultClasses","semesterCounter","setSemesterCounter","LOCAL_STORAGE_SEMESTERS","INITIAL_SEMESTERS","rawSemesters","localStorage","getItem","JSON","parse","allSemesters","changeSemesters","tempSemCounter","tempid","tempsem","tempyear","Math","trunc","sems","style","fontFamily","sem","setItem","stringify","App","Container","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a33b655d.chunk.js","sourcesContent":["import React from \"react\";\nimport { useState } from \"react\";\nimport {Class} from \"../interfaces/class\";\nimport { Card, Row, Button, Col, InputGroup, FormControl } from \"react-bootstrap\";\nimport { Semester } from \"../interfaces/semester\";\n\nexport function ClassTable({currID, currentSem, currYear, semList, setSemList, lastID, idSet, semPer, semCount, setSemCount, classList}:{\n    currID: number,\n    currentSem: number,\n    currYear: number,\n    semList: Semester[],\n    setSemList: (semList: Semester[]) => void,\n    lastID: number,\n    idSet: (num: number) => void,\n    semPer: number,\n    semCount: number,\n    setSemCount: (num: number) => void\n    classList: Class[];\n}) : JSX.Element {\n    const [currentId, setId] = useState<string>(\"CISC\");\n    const [courseName, setcourseName]  = useState<string>(\"ClassName\");\n    const [currentKey, setKey] = useState<number>(6);\n\n    const [editRow, setEditRow] = useState<number>(0);\n    const [editId, setEditId] = useState<string>(\"\");\n    const [editName, setEditName] = useState<string>(\"\");\n    const [editCredits, setEditCredits] = useState<number>(0);\n\n    //const semesterID = currID.valueOf();\n    //const currentSemesterNumber = currentSem.valueOf();\n    //const currentSemesterYear = currYear.valueOf();\n    //const currentSemesterNumber = currentSem;\n    //const currentSemesterYear = currYear;\n\n    function addCourse () {\n        const tempKey = currentKey + 1;\n        setKey(tempKey);\n        setId(currentId);\n        setcourseName(courseName);\n        const temp: Class = {id: currentId, name: courseName, credits: 3, key: tempKey};\n        const newClasses: Class[] = [...classList, temp];\n        //sub.push(temp);\n        //classList = newClasses;\n        // Need to fix key generation\n        classList = [...newClasses];\n        const fixedList: Semester[] = [...semList];\n        const idx = fixedList.findIndex((semester: Semester) => semester.id===currID);\n        fixedList[idx].classes = classList;\n        setSemList(fixedList);\n    }\n\n    function deleteLastCourse () {\n        setKey(currentKey + 1);\n        const newClasses: Class[] = [...classList];\n        newClasses.pop();\n        classList = [...newClasses];\n        const fixedList: Semester[] = [...semList];\n        const idx = fixedList.findIndex((semester: Semester) => semester.id===currID);\n        fixedList[idx].classes = classList;\n        setSemList(fixedList);\n    }\n\n    function deleteCourse (currentKey: number) {\n        const newSem = classList.filter((sbj) => sbj.key !== currentKey);\n        classList = newSem; \n        const fixedList: Semester[] = [...semList];\n        const idx = fixedList.findIndex((semester: Semester) => semester.id===currID);\n        fixedList[idx].classes = classList;\n        setSemList(fixedList);\n    }\n\n    function clearCourse () {\n        setKey(0);\n        //classList = [{id: currentId, name: courseName, credits: 3, key: 0}];\n        classList = [];\n        const fixedList: Semester[] = [...semList];\n        const idx = fixedList.findIndex((semester: Semester) => semester.id===currID);\n        fixedList[idx].classes = classList;\n        setSemList(fixedList);\n    }\n\n    function deleteSem () {\n        idSet(lastID+1);\n        const fixedList: Semester[] = [...semList];\n        //const toDelete: Semester = {id: currID, semesterNum: currentSem, year: currYear};\n        const idx = fixedList.findIndex((semester: Semester) => semester.id===currID);\n        /*if (idx===-1) {\n            alert(\"element not found\");\n        }*/\n        fixedList.splice(idx, 1);\n        //const idx = fixedList.indexOf(this);\n        //fixedList.splice(currID, 1);\n        if (fixedList[0]) {\n            let temp: Semester; \n            for (let i=idx; fixedList[i]; i++) {\n                temp = fixedList[i];\n                //temp.semesterNum = i;\n                temp.semesterNum -= 1;\n                if (temp.semesterNum===0) {\n                    temp.year -= 1;\n                    temp.semesterNum = semPer;\n                }\n                fixedList[i] = temp;\n            }\n            //setSemList(fixedList);\n        } else {\n            idSet(-1);\n            //setSemList(fixedList);\n        }\n        setSemCount(semCount-1);\n        setSemList(fixedList);\n    }\n\n    function editSem (currSem: number) {\n        setEditRow(currSem);\n    }\n\n    function submitSem () {\n        const tempList = classList;\n        tempList[editRow-1].id = editId;\n        tempList[editRow-1].name = editName;\n        tempList[editRow-1].credits = editCredits;\n        classList = tempList;\n        setEditRow(0);\n    }\n\n    let newRow = 0;\n\n\n    //<Row>ID {semesterID}</Row>\n    //<Row>ID {currID} SemesterNo. {currentSem} YearNo. {currYear}</Row>\n    return (\n        <Row><Card className=\"m-3\">\n            <Row><p className=\"text-center\"><strong>Semester {currentSem} Year {currYear}</strong></p></Row>\n            <table>\n                <thead><tr><th>Class ID</th><th>Class Name</th><th>Credits</th></tr></thead>\n                { classList.map((sbj: Class) => {\n                    {newRow++;} // Track what row it is on\n                    return (\n                        editRow == newRow ? // If the current row was set to be edited, do this\n                            /** Editing bugs - Riyara:\n                             *  - Was Start Over a bit buggy before? If not I messed with it a little, sorry.\n                             *  - If you submit with nothing in there, it will use default values (0) or the previously used edit values\n                             *  - Probably isn't nice-looking that it says \"NaN\" if you put in a non-number for credits. Easily fixable I'd imagine\n                            */\n                            <tr key={sbj.key}> \n                                <td>\n                                    <InputGroup className=\"sbj-id\">\n                                        <FormControl\n                                            placeholder={sbj.id}\n                                            aria-label=\"ID\"\n                                            aria-describedby=\"basic-addon1\"\n                                            onChange={(event) => setEditId(event.target.value)}\n                                        />\n                                    </InputGroup>\n                                </td>\n                                <td>\n                                    <InputGroup className=\"sbj-name\">\n                                        <FormControl\n                                            placeholder={sbj.name}\n                                            aria-label=\"Name\"\n                                            aria-describedby=\"basic-addon1\"\n                                            onChange={(event) => setEditName(event.target.value)}\n                                        />\n                                    </InputGroup>\n                                </td>\n                                <td>\n                                    <InputGroup className=\"sbj-credits\">\n                                        <FormControl\n                                            placeholder={sbj.credits.toString()}\n                                            aria-label=\"Credits\"\n                                            aria-describedby=\"basic-addon1\"\n                                            onChange={(event) => setEditCredits(parseInt(event.target.value,10))}\n                                        />\n                                    </InputGroup>\n                                </td>\n                                <td><Button onClick={submitSem}>Submit</Button></td>\n                            </tr>\n                            : // otherwise do what it originally does\n                            <tr key={sbj.key}> \n                                <td>{sbj.id}</td>\n                                <td>{sbj.name}</td>\n                                <td>{sbj.credits}</td>\n                                <td><Button className=\"m-1\" onClick={() => editSem(sbj.key)}>Edit</Button></td>\n                                <td><Button className=\"m-1\" onClick={() => deleteCourse(sbj.key)}>Delete</Button></td>\n                            </tr>\n                    );\n                })}\n            </table>\n            <Row>\n                <Col><Button className=\"m-2\" data-testid=\"add-course-button\"onClick={addCourse}>Add Course</Button></Col>\n                <Col><Button className=\"m-2\" data-testid=\"delete-last-course-button\" onClick = {deleteLastCourse}><div className=\"btn-del-course\">Delete Course</div></Button></Col>\n                <Col><Button className=\"m-2\" data-testid=\"clear-courses-button\" onClick={clearCourse}>Clear Courses</Button></Col>\n                <Col><Button className=\"m-2\" data-testid=\"delete-this-semester-button\" onClick={deleteSem}>Delete This Semester</Button></Col>\n            </Row>\n        </Card></Row>\n    );\n    //Table setup credit to Dr. Bart\n}\n//<div className=\"btn-del-course\">","import { Row, Button} from \"react-bootstrap\";\nimport React from \"react\";\nimport { ClassTable } from \"./ClassTable\";\nimport { Semester } from \"../interfaces/semester\";\nimport { useState } from \"react\";\n//import { Upload } from \"./Upload\";\n\n/*\nI think for this it should return a card and several subject components (which will need to be made for ease of adding classes).\nIt should have the buttons to add courses.\n3 columns 5 rows default?\n-NEEDS \"ADD CLASS\" BUTTON\n*/\n\nexport function SemesterTable() : JSX.Element {\n    //const defaultID = 1;\n    //const [currentSemester, setSemester] = useState<number>(0);\n    //const [currentYear, setYear] = useState<number>(0);\n    const [currentID, setID] = useState<number>(0);\n    const semestersPerYear = 2; // In case we want to change the number of semesters per year\n    //let newSemester: TableFace = \n    /*const semesters: TableFace[] = [\n        {semester: 1}\n    ];*/\n    //setSemester(currentSemester); // This exists solely to appease the linter.\n    //const [semesters, setSem] = useState<TableFace[]>([{semester: currentSemester}]);\n    //const [semesters, setSem] = useState<TableFace[]>([{id: currentID, semester: currentSemester, year: currentYear}]);\n    const defaultClasses = [{id: \"CISC\", name: \"Class Name\", credits: 3, key: 1},{id: \"CISC\", name: \"Class Name\", credits: 3, key: 2},{id: \"CISC\", name: \"Class Name\", credits: 3, key: 3},{id: \"CISC\", name: \"Class Name\", credits: 3, key: 4},{id: \"CISC\", name: \"Class Name\", credits: 3, key: 5}];\n    \n    const [semesterCounter, setSemesterCounter] = useState<number>(0);\n\n\n\n    const LOCAL_STORAGE_SEMESTERS = \"schedule\";\n    const INITIAL_SEMESTERS: Semester[] = [\n        {id:currentID, semesterNum: 1, year: 1, classes: defaultClasses}\n    ];\n\n    function getLocalStorageSemesters(): Semester[] {\n        const rawSemesters: string|null = localStorage.getItem(LOCAL_STORAGE_SEMESTERS);\n        if (rawSemesters === null) {\n            return [...INITIAL_SEMESTERS];\n        } else {\n            return JSON.parse(rawSemesters);\n        }\n    }\n\n    const [allSemesters, changeSemesters] = useState<Semester[]>(getLocalStorageSemesters);\n\n    function addSemester() {\n        const tempSemCounter = semesterCounter+1;\n        const tempid = currentID+1;\n        let tempsem = (1+tempSemCounter)%semestersPerYear;\n        /*if (currentID===0) {\n            tempsem = 2;\n        }*/\n        //let tempyear = currentYear;\n        const tempyear = Math.trunc(tempSemCounter/semestersPerYear)+1;\n        if (tempsem===0) {\n            tempsem+=semestersPerYear;\n        }\n        /*if ((tempid%semestersPerYear)===0) {\n            /*if (currentID===0) {\n                tempyear -= 1;\n            }\n            tempyear += 1;\n            setYear(tempyear);\n        }*/\n\n        //setSemester(tempsem);\n        setID(tempid);\n        const temp: Semester = {id: tempid, semesterNum: tempsem, year: tempyear, classes: defaultClasses};\n        //temp.semester = currentSemester;\n        const sems: Semester[] = [...allSemesters, temp];\n        //sems.push(temp);\n        changeSemesters(sems);\n        setSemesterCounter(tempSemCounter);\n    }\n    \n    function deleteSemester() {\n        setID(currentID-1);\n        const sems: Semester[] = [...allSemesters]; \n        sems.pop();\n        if (!sems[0]) {\n            setID(-1);\n            //setYear(0);\n            //setSemester(0);\n        }\n        changeSemesters(sems);\n    }\n    \n    function deleteAllSems() {\n        //setSemester(0);\n        //setYear(0);\n        setID(-1);\n        changeSemesters([]);\n        setSemesterCounter(-1);\n        //addSemester();\n    }\n\n    // Credit to https://stackoverflow.com/questions/66801478/write-to-a-text-or-json-file-react-node for the JSON saving function\n    /*\n    function saveToJSON() {\n        const fileData = JSON.stringify(allSemesters);\n        const blob = new Blob([fileData], {type: \"text/plain\"});\n        const url = URL.createObjectURL(blob);\n        const link = document.createElement(\"a\");\n        link.download = \"filename.json\";\n        link.href = url;\n        link.click();\n    }\n    */\n\n    function saveToLocal() {\n        localStorage.setItem(LOCAL_STORAGE_SEMESTERS, JSON.stringify(allSemesters));\n    }\n\n    /*const tempSems: TableFace[] = semesters;\n    tempSems.push({semester: currentSemester});\n    addSem(tempSems);*/\n\n    return (\n        <>\n            <Row><Button data-testid=\"add-semester-button\" onClick={addSemester} className=\"btn btn-add m-3\" style={{fontFamily: \"Courier New\"}}>Add Semester</Button></Row>\n            <Row>\n                <table>\n                    { allSemesters.map((sem: Semester) => {\n                        return <tr key={sem.id}>\n                            <td><ClassTable currentSem={sem.semesterNum} currYear={sem.year} currID={sem.id} semList={allSemesters} setSemList={changeSemesters} lastID={currentID} idSet={setID} semPer={semestersPerYear} semCount={semesterCounter} setSemCount={setSemesterCounter} classList={sem.classes}></ClassTable></td>\n                        </tr>;\n                    })}\n                </table>\n            </Row>\n            <Button data-testid=\"delete-last-semester-button\" onClick={deleteSemester} className=\"btn btn-delete m-3\" style={{fontFamily: \"Courier New\"}}>Delete Last Semester</Button>\n            <Button data-testid=\"clear-all-semesters-button\" onClick={deleteAllSems} className=\"btn btn-delete m-3\" style={{fontFamily: \"Courier New\"}}>Clear All Semesters</Button>\n            <Button data-testid=\"save-to-local-button\" onClick={saveToLocal} className=\"btn btn-save m-3\">Save Layout</Button>\n        </>\n        //<SubjectTable currentSem={currentSemester}></SubjectTable>\n        //<Button data-testid=\"save-to-json-button\" onClick={saveToJSON} className=\"m-3\">Save</Button>\n        //<Button data-testid=\"load-from-json-button\" onClick={Upload} className=\"m-3\">Load</Button>\n    );\n}\n\n","import React from \"react\";\n//import { useState } from \"react\";\n//import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./override.css\";\nimport { SemesterTable } from \"./components/SemesterViewer\";\nimport { Container } from \"react-bootstrap\";\n\n/*function App(): JSX.Element {\n\n    \n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                UD CIS Scheduler\n                <p>\n                    Edit <code>src/App.tsx</code> and save to reload.\n                </p>\n                <p>Dara McNally</p>\n                <p>Riyara Master</p>\n                <p>Trea Holley</p> \n            </header>\n        </div>\n    );\n}*/\n\nfunction App(): JSX.Element {\n\n    //TODO: Save/Load\n    //TODO: Export/Import (CSV/PDF?) (Do some research)\n    //TODO: Make it look nice\n    //TODO: Welcome screen\n\n    return (\n        <>\n            <div className=\"text-center\" style={{fontFamily: \"Courier New\"}}>\n                <h1><strong>UDel CISC Degree Planner</strong></h1>\n                <p>Welcome to the University of Delaware CISC Degree Planner! Here you can add/delete semesters and courses from your degree plan.</p>\n                <h5>Click Add Semester or Edit to get started!</h5>\n            </div>\n            <Container>\n                <SemesterTable></SemesterTable>\n            </Container>\n        </>\n    );\n}\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}