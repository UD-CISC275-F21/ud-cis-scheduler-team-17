{"version":3,"sources":["components/SubjectViewer.tsx","components/Table.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SubjectTable","currID","currentSem","currYear","semList","setSemList","thisID","idSet","Card","Row","id","name","credits","map","sbj","Col","Button","onClick","fixedList","idx","indexOf","semester","year","splice","OurTable","useState","currentSemester","setSemester","currentYear","setYear","currentID","setID","semesters","setSem","tempid","tempsem","tempyear","temp","sems","push","className","sem","pop","App","Container","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6RAKO,SAASA,EAAT,GAQW,IARYC,EAQb,EARaA,OAAQC,EAQrB,EARqBA,WAAYC,EAQjC,EARiCA,SAAUC,EAQ3C,EAR2CA,QAASC,EAQpD,EARoDA,WAAYC,EAQhE,EARgEA,OAAQC,EAQxE,EARwEA,MAwBrF,OACI,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,UAAK,+CAAkBP,EAAlB,SAAoCC,OACzC,eAACM,EAAA,EAAD,iBAASR,KACT,kCACI,+BAAI,0CAAiB,4CAAmB,4CApBrB,CAC3B,CAACS,GAAI,UAAWC,KAAM,yCAA0CC,QAAS,GACzE,CAACF,GAAI,OAAQC,KAAM,YAAaC,QAAS,GACzC,CAACF,GAAI,OAAQC,KAAM,YAAaC,QAAS,GACzC,CAACF,GAAI,OAAQC,KAAM,YAAaC,QAAS,GACzC,CAACF,GAAI,OAAQC,KAAM,YAAaC,QAAS,IAgBnBC,KAAI,SAACC,GACf,OAAO,+BACH,6BAAKA,EAAIJ,KACT,6BAAKI,EAAIH,OACT,6BAAKG,EAAIF,YAHGE,EAAIH,YAO5B,eAACF,EAAA,EAAD,WACI,cAACM,EAAA,EAAD,UAAK,cAACC,EAAA,EAAD,2BACL,cAACD,EAAA,EAAD,UAAK,cAACC,EAAA,EAAD,8BACL,cAACD,EAAA,EAAD,UAAK,cAACC,EAAA,EAAD,CAAQC,QAzBzB,WACIV,EAAMD,EAAO,GACb,IAAMY,EAAyBd,EACzBe,EAAMD,EAAUE,QAAQ,CAACV,GAAIT,EAAQoB,SAAUnB,EAAYoB,KAAMnB,IACvEe,EAAUK,OAAOJ,GACjBd,EAAWa,IAoBE,qCCjCd,SAASM,IAEZ,MAAuCC,mBAAiB,GAAxD,mBAAOC,EAAP,KAAwBC,EAAxB,KACA,EAA+BF,mBAAiB,GAAhD,mBAAOG,EAAP,KAAoBC,EAApB,KACA,EAA2BJ,mBAAiB,GAA5C,mBAAOK,EAAP,KAAkBC,EAAlB,KASA,EAA4BN,mBAAsB,CAAC,CAACf,GAAIoB,EAAWT,SAAUK,EAAiBJ,KAAMM,KAApG,mBAAOI,EAAP,KAAkBC,EAAlB,KAyCA,OACI,qCACI,cAACxB,EAAA,EAAD,UAAK,cAACO,EAAA,EAAD,CAAQC,QAzCrB,WACI,IAAMiB,EAASJ,EAAU,EACrBK,EAAUD,EAXO,EAYjBE,EAAWR,EACD,IAAVO,IACAA,GAdiB,GAgBhBD,EAhBgB,IAgBW,GAE5BL,EADAO,GAAY,GAIhBT,EAAYQ,GACZJ,EAAMG,GACN,IAAMG,EAAkB,CAAC3B,GAAIwB,EAAQb,SAAUc,EAASb,KAAMc,GAExDE,EAAoBN,EAC1BM,EAAKC,KAAKF,GACVJ,EAAOK,IAuBgCE,UAAU,MAAxC,4BACL,cAAC/B,EAAA,EAAD,UACI,gCACMuB,EAAUnB,KAAI,SAAC4B,GACb,OAAO,6BACH,6BAAI,cAACzC,EAAD,CAAcE,WAAYuC,EAAIpB,SAAUlB,SAAUsC,EAAInB,KAAMrB,OAAQwC,EAAI/B,GAAIN,QAAS4B,EAAW3B,WAAY4B,EAAQ3B,OAAQwB,EAAWvB,MAAOwB,OADtIU,EAAI/B,WAMhC,cAACM,EAAA,EAAD,CAAQC,QA9BhB,WACIc,EAAMD,EAAU,GAChB,IAAMQ,EAAoBN,EAC1BM,EAAKI,MACLT,EAAOK,IA0B8BE,UAAU,MAA3C,kCACA,cAACxB,EAAA,EAAD,CAAQC,QAxBhB,WACIU,EAAY,GACZE,EAAQ,GACRE,EAAM,GACNE,EAAO,CAAC,CAACvB,GAAI,EAAGW,SAAU,EAAGC,KAAM,MAoBCkB,UAAU,MAA1C,2B,YCtCGG,MAVf,WAII,OACI,cAACC,EAAA,EAAD,UACI,cAACpB,EAAD,OCxBGqB,EAZS,SAACC,GACjBA,GAAeA,aAAuBC,UACtC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QACzDJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHpBQ,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,SAM5Bb,M","file":"static/js/main.ed5b2dff.chunk.js","sourcesContent":["import React from \"react\";\nimport {Subject} from \"../interfaces/subject\";\nimport { Card, Row, Button, Col } from \"react-bootstrap\";\nimport { TableFace } from \"../interfaces/tableface\";\n\nexport function SubjectTable({currID, currentSem, currYear, semList, setSemList, thisID, idSet}:{\n    currID: number,\n    currentSem: number,\n    currYear: number,\n    semList: TableFace[],\n    setSemList: (semList: TableFace[]) => void,\n    thisID: number,\n    idSet: (num: number) => void\n}) : JSX.Element {\n    const subjectList: Subject[] = [\n        {id: \"CISC106\", name: \"General Computer Science for Engineers\", credits: 3},\n        {id: \"CISC\", name: \"ClassName\", credits: 3},\n        {id: \"CISC\", name: \"ClassName\", credits: 3},\n        {id: \"CISC\", name: \"ClassName\", credits: 3},\n        {id: \"CISC\", name: \"ClassName\", credits: 3}];\n\n    function deleteSem () {\n        idSet(thisID+1);\n        const fixedList: TableFace[] = semList;\n        const idx = fixedList.indexOf({id: currID, semester: currentSem, year: currYear});\n        fixedList.splice(idx);\n        setSemList(fixedList);\n    }\n\n    return (\n        <Card>\n            <Row><strong>Semester {currentSem} Year {currYear}</strong></Row>\n            <Row>ID {currID}</Row>\n            <table>\n                <tr><th>Class ID</th><th>Class Name</th><th>Credits</th></tr>\n                { subjectList.map((sbj: Subject) => {\n                    return <tr key={sbj.name}>\n                        <td>{sbj.id}</td>\n                        <td>{sbj.name}</td>\n                        <td>{sbj.credits}</td>\n                    </tr>;\n                })}\n            </table>\n            <Row>\n                <Col><Button >Add Course</Button></Col>\n                <Col><Button >Delete Course</Button></Col>\n                <Col><Button onClick={deleteSem}>Delete Semester</Button></Col>\n            </Row>\n        </Card>\n    );\n    //Table setup credit to Dr. Bart\n}","import { Row, Button } from \"react-bootstrap\";\nimport React from \"react\";\nimport { SubjectTable } from \"./SubjectViewer\";\nimport { TableFace } from \"../interfaces/tableface\";\nimport { useState } from \"react\";\n\n/*\nI think for this it should return a card and several subject components (which will need to be made for ease of adding classes).\nIt should have the buttons to add courses.\n3 columns 5 rows default?\n-NEEDS SUBJECTVIEWER COMPONENT FOR RETURN\n-NEEDS \"ADD CLASS\" BUTTON\n*/\nexport function OurTable() : JSX.Element {\n    //const defaultID = 1;\n    const [currentSemester, setSemester] = useState<number>(1);\n    const [currentYear, setYear] = useState<number>(1);\n    const [currentID, setID] = useState<number>(1);\n    //const [currentki, setki] = useState<number>(1);\n    const semestersPerYear = 2; // In case we want to change the number of semesters per year\n    //let newSemester: TableFace = \n    /*const semesters: TableFace[] = [\n        {semester: 1}\n    ];*/\n\n    //const [semesters, setSem] = useState<TableFace[]>([{semester: currentSemester}]);\n    const [semesters, setSem] = useState<TableFace[]>([{id: currentID, semester: currentSemester, year: currentYear}]);\n\n    function addSemester() {\n        const tempid = currentID+1;\n        let tempsem = tempid%semestersPerYear;\n        let tempyear = currentYear;\n        if (tempsem===0) {\n            tempsem+=semestersPerYear;\n        }\n        if ((tempid%semestersPerYear)===1) {\n            tempyear += 1;\n            setYear(tempyear);\n        }\n\n        setSemester(tempsem);\n        setID(tempid);\n        const temp: TableFace = {id: tempid, semester: tempsem, year: tempyear};\n        //temp.semester = currentSemester;\n        const sems: TableFace[] = semesters;\n        sems.push(temp);\n        setSem(sems);\n    }\n\n    function deleteSemester() {\n        setID(currentID-1);\n        const sems: TableFace[] = semesters; \n        sems.pop();\n        setSem(sems);\n    }\n    \n    function deleteAllSems() {\n        setSemester(1);\n        setYear(1);\n        setID(1);\n        setSem([{id: 1, semester: 1, year: 1}]);\n    }\n\n    /*const tempSems: TableFace[] = semesters;\n    tempSems.push({semester: currentSemester});\n    addSem(tempSems);*/\n\n    return (\n        <>\n            <Row><Button onClick={addSemester} className=\"m-3\">Add Semester</Button></Row>\n            <Row>\n                <table>\n                    { semesters.map((sem: TableFace) => {\n                        return <tr key={sem.id}>\n                            <td><SubjectTable currentSem={sem.semester} currYear={sem.year} currID={sem.id} semList={semesters} setSemList={setSem} thisID={currentID} idSet={setID}></SubjectTable></td>\n                        </tr>;\n                    })}\n                </table>\n            </Row>\n            <Button onClick={deleteSemester} className=\"m-3\">Delete Last Semester</Button>\n            <Button onClick={deleteAllSems} className=\"m-3\">Start Over</Button>\n        </>\n        //<SubjectTable currentSem={currentSemester}></SubjectTable>\n    );\n}\n\n","import React from \"react\";\n//import { useState } from \"react\";\n//import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { OurTable } from \"./components/Table\";\nimport { Container } from \"react-bootstrap\";\n/*\n-NEEDS ADD TABLE BUTTON\n-NEEDS TABLE COMPONENT RETURNED\n*/\n\n/*function App(): JSX.Element {\n\n    \n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                UD CIS Scheduler\n                <p>\n                    Edit <code>src/App.tsx</code> and save to reload.\n                </p>\n                <p>Dara McNally</p>\n                <p>Riyara Master</p>\n                <p>Trea Holley</p> \n            </header>\n        </div>\n    );\n}*/\n\nfunction App(): JSX.Element {\n\n    \n\n    return (\n        <Container>\n            <OurTable></OurTable>\n        </Container>\n    );\n}\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}