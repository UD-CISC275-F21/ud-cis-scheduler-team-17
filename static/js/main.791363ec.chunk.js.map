{"version":3,"sources":["components/SubjectViewer.tsx","components/Table.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SubjectTable","currID","currentSem","currYear","semList","setSemList","thisID","idSet","semPer","Card","Row","id","name","credits","map","sbj","Col","Button","onClick","fixedList","splice","temp","i","semester","year","OurTable","useState","currentID","setID","semesters","setSem","tempid","tempsem","tempyear","Math","trunc","sems","push","className","sem","pop","App","Container","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.791363ec.chunk.js","sourcesContent":["import React from \"react\";\nimport {Subject} from \"../interfaces/subject\";\nimport { Card, Row, Button, Col } from \"react-bootstrap\";\nimport { TableFace } from \"../interfaces/tableface\";\n\nexport function SubjectTable({currID, currentSem, currYear, semList, setSemList, thisID, idSet, semPer}:{\n    currID: number,\n    currentSem: number,\n    currYear: number,\n    semList: TableFace[],\n    setSemList: (semList: TableFace[]) => void,\n    thisID: number,\n    idSet: (num: number) => void,\n    semPer: number\n}) : JSX.Element {\n    const subjectList: Subject[] = [\n        {id: \"CISC106\", name: \"General Computer Science for Engineers\", credits: 3},\n        {id: \"CISC\", name: \"ClassName\", credits: 3},\n        {id: \"CISC\", name: \"ClassName\", credits: 3},\n        {id: \"CISC\", name: \"ClassName\", credits: 3},\n        {id: \"CISC\", name: \"ClassName\", credits: 3}];\n\n    \n    function deleteSem () {\n        //idSet(thisID+1);\n        const fixedList: TableFace[] = semList;\n        //const idx = fixedList.indexOf({id: currID, semester: currentSem, year: currYear});\n        //const idx = fixedList.indexOf(this);\n        fixedList.splice(currID, 1);\n        if (fixedList[0]) {\n            let temp: TableFace; \n            for (let i=currID; fixedList[i]; i++) {\n                temp = fixedList[i];\n                temp.id = i;\n                temp.semester -= 1;\n                if (temp.semester==0) {\n                    temp.year -= 1;\n                    temp.semester = semPer;\n                }\n                fixedList[i] = temp;\n            }\n            idSet(thisID-1);\n            setSemList(fixedList);\n        } else {\n            idSet(-1);\n        }\n    }\n\n    //<Row>ID {currID}</Row>\n    return (\n        <Card>\n            <Row><strong>Semester {currentSem} Year {currYear}</strong></Row>\n            <table>\n                <tr><th>Class ID</th><th>Class Name</th><th>Credits</th></tr>\n                { subjectList.map((sbj: Subject) => {\n                    return <tr key={sbj.name}>\n                        <td>{sbj.id}</td>\n                        <td>{sbj.name}</td>\n                        <td>{sbj.credits}</td>\n                    </tr>;\n                })}\n            </table>\n            <Row>\n                <Col><Button >Add Course</Button></Col>\n                <Col><Button >Delete Course</Button></Col>\n                <Col><Button onClick={deleteSem}>Delete This Semester</Button></Col>\n            </Row>\n        </Card>\n    );\n    //Table setup credit to Dr. Bart\n}","import { Row, Button } from \"react-bootstrap\";\nimport React from \"react\";\nimport { SubjectTable } from \"./SubjectViewer\";\nimport { TableFace } from \"../interfaces/tableface\";\nimport { useState } from \"react\";\n\n/*\nI think for this it should return a card and several subject components (which will need to be made for ease of adding classes).\nIt should have the buttons to add courses.\n3 columns 5 rows default?\n-NEEDS SUBJECTVIEWER COMPONENT FOR RETURN\n-NEEDS \"ADD CLASS\" BUTTON\n*/\nexport function OurTable() : JSX.Element {\n    //const defaultID = 1;\n    //const [currentSemester, setSemester] = useState<number>(0);\n    //const [currentYear, setYear] = useState<number>(0);\n    const [currentID, setID] = useState<number>(0);\n    //const [currentki, setki] = useState<number>(1);\n    const semestersPerYear = 2; // In case we want to change the number of semesters per year\n    //let newSemester: TableFace = \n    /*const semesters: TableFace[] = [\n        {semester: 1}\n    ];*/\n    //setSemester(currentSemester); // This exists solely to appease the linter.\n    //const [semesters, setSem] = useState<TableFace[]>([{semester: currentSemester}]);\n    //const [semesters, setSem] = useState<TableFace[]>([{id: currentID, semester: currentSemester, year: currentYear}]);\n    const [semesters, setSem] = useState<TableFace[]>([{id:currentID, semester: 1, year: 1}]);\n\n    function addSemester() {\n        const tempid = currentID+1;\n        let tempsem = (1+tempid)%semestersPerYear;\n        /*if (currentID===0) {\n            tempsem = 2;\n        }*/\n        //let tempyear = currentYear;\n        const tempyear = Math.trunc(tempid/semestersPerYear)+1;\n        if (tempsem===0) {\n            tempsem+=semestersPerYear;\n        }\n        /*if ((tempid%semestersPerYear)===0) {\n            /*if (currentID===0) {\n                tempyear -= 1;\n            }\n            tempyear += 1;\n            setYear(tempyear);\n        }*/\n\n        //setSemester(tempsem);\n        setID(tempid);\n        const temp: TableFace = {id: tempid, semester: tempsem, year: tempyear};\n        //temp.semester = currentSemester;\n        const sems: TableFace[] = semesters;\n        sems.push(temp);\n        setSem(sems);\n    }\n    \n    function deleteSemester() {\n        setID(currentID-1);\n        const sems: TableFace[] = semesters; \n        sems.pop();\n        if (!sems[0]) {\n            setID(-1);\n            //setYear(0);\n            //setSemester(0);\n        }\n        setSem(sems);\n    }\n    \n    function deleteAllSems() {\n        //setSemester(0);\n        //setYear(0);\n        setID(0);\n        setSem([{id:0, semester: 1, year: 1}]);\n        //addSemester();\n    }\n\n    /*const tempSems: TableFace[] = semesters;\n    tempSems.push({semester: currentSemester});\n    addSem(tempSems);*/\n\n    return (\n        <>\n            <Row><Button onClick={addSemester} className=\"m-3\">Add Semester</Button></Row>\n            <Row>\n                <table>\n                    { semesters.map((sem: TableFace) => {\n                        return <tr key={sem.id}>\n                            <td><SubjectTable currentSem={sem.semester} currYear={sem.year} currID={sem.id} semList={semesters} setSemList={setSem} thisID={currentID} idSet={setID} semPer={semestersPerYear}></SubjectTable></td>\n                        </tr>;\n                    })}\n                </table>\n            </Row>\n            <Button onClick={deleteSemester} className=\"m-3\">Delete Last Semester</Button>\n            <Button onClick={deleteAllSems} className=\"m-3\">Start Over</Button>\n        </>\n        //<SubjectTable currentSem={currentSemester}></SubjectTable>\n    );\n}\n\n","import React from \"react\";\n//import { useState } from \"react\";\n//import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { OurTable } from \"./components/Table\";\nimport { Container } from \"react-bootstrap\";\n/*\n-NEEDS ADD TABLE BUTTON\n-NEEDS TABLE COMPONENT RETURNED\n*/\n\n/*function App(): JSX.Element {\n\n    \n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                UD CIS Scheduler\n                <p>\n                    Edit <code>src/App.tsx</code> and save to reload.\n                </p>\n                <p>Dara McNally</p>\n                <p>Riyara Master</p>\n                <p>Trea Holley</p> \n            </header>\n        </div>\n    );\n}*/\n\nfunction App(): JSX.Element {\n\n    \n\n    return (\n        <Container>\n            <OurTable></OurTable>\n        </Container>\n    );\n}\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}